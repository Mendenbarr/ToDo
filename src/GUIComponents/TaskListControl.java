/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIComponents;


/**
 *
 * @author Jake
 */
public class TaskListControl extends javax.swing.JPanel {
    TaskListModel taskModel = new TaskListModel();

    /**
     * Creates new form TaskListControl
     */
    public TaskListControl() {
        initComponents();
        taskList.setCellRenderer(new TaskListCellRenderer());
        taskList.setModel(taskModel);
    }
    
    public TaskListControl(TaskListModel model){
        this();
        taskList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnToggle = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();

        taskList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(taskList);

        btnAdd.setText("Add Task");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnToggle.setText("Toggle Task Complete");
        btnToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove Task");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Task");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnToggle)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addTask(txtInput.getText());
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleActionPerformed
        toggleTask();
    }//GEN-LAST:event_btnToggleActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeTask();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editTask(txtInput.getText());
    }//GEN-LAST:event_btnEditActionPerformed

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputActionPerformed

    public void addTask(String name){
        // Protection from blank names 
        if (name.isBlank()) return;
        taskModel.addElement(new Task(name));
    }
    
    public void removeTask(){
        // If there is nothing in the task list, do nothing
        if (taskModel.isEmpty()) return;
        // If nothing is selected, but tasks exist, remove the final task
        if (taskList.getSelectedIndex() == -1) {
            taskModel.remove(taskModel.size() - 1);
            return;
        }
        // If there is at least one task selected, removes the selected tasks
        int[] index = new int [taskList.getMaxSelectionIndex() - taskList.getMinSelectionIndex()];
        for (int i = -1; i < index.length; i++){
            taskModel.remove(taskList.getSelectedIndex());
        }
    }
    
    public void editTask(String name){
        // If there is nothing in the task list, do nothing
        if (taskModel.isEmpty()) return;
        // If nothing is selected, but tasks exist, do nothing
        if (taskList.getSelectedIndex() == -1) return;
        // If there is at least one task selected, edit the first selected tasks
        taskModel.setElementAt(new Task(name), taskList.getSelectedIndex());
        
    }
    
    public void toggleTask(){
        // If there is nothing in the task list, do nothing
        if (taskModel.isEmpty()) return;
        // If nothing is selected, but tasks exist, do nothing
        if (taskList.getSelectedIndex() == -1) return;
        // If there is at least one task selected, toggle all selected tasks
        for (int i = taskList.getMinSelectionIndex(); i <= taskList.getMaxSelectionIndex(); i++){
            Task t = (Task)taskModel.getElementAt(i);
            t.checkBox(!t.boxChecked());
        }
        taskList.updateUI();
    }
    
    public TaskListModel getModel(){
        return taskModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnToggle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> taskList;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables
}


